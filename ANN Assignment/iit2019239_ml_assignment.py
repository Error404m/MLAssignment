# -*- coding: utf-8 -*-
"""IIT2019239_ML_ASSIGNMENT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sy5kHowG7ct0Ets_j1dDcV76rXj3LjYI

MRITYUNJAYA TIWARI : IIT2019239

ML ASSIGNMENT

---

Assignment (Artificial Neural Networks)
A medical dataset along with its description is attached. The main idea of this
data set is to prepare the algorithm of the expert-system, which will perform
the presumptive diagnosis of two diseases of urinary system.
Build the above expert system using an artificial neural network using only the
Numpy library and implement the following:
1. Label encode the different categorical features using binary identifiers [1,0].
2. Fix the number of hidden layers to just 1; use sigmoid activation for this
hidden layer. Also set the number of nodes in the hidden layer to 7.
3. Perform the forward and backward pass and report the weight matrices
for first three iterations.
4. Finally train the model for 50 epochs and report the accuracy of the model
on the test set.
5. Repeat the above steps for two hidden layers with 5 and 10 nodes respectively; for the two hidden layers use linear and sigmoid activation in the
same order



---



---

Mounting drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Importing Library files """

import numpy as np
import pandas as pd

"""Readind dataset nd printing that



"""

df = pd.read_csv('/content/diagnosis.txt',sep='\t')
df.columns = ['a2','a3','a4','a5','a6','d1','d2']
df['a1'] = df.index
df.index = range(0,119)
df = df.reindex(columns=sorted(df.columns))
df

for i in range(0,119):
  df['a1'][i] = float(df['a1'][i][:2]) + float(df['a1'][i][3:])/10

df

"""Converting strings into binary 0/1"""

for i in df.columns[1:]:
  for j in range(0,119):
    if df[i][j] == 'yes':
      df[i][j] = 1
    else:
      df[i][j] = 0

df

df.to_csv('data.csv')

X = df[df.columns[:6]]
Y = df[df.columns[6:]]

"""normalizing the dataset"""

X['a1'] = X['a1']/max(X['a1'])

X

"""Printing the datasets"""

print(X)
print(Y)

x_train = X[:101]
x_test = X[101:]
y_train = Y[:101]
y_test = Y[101:]

"""Print train nd tset data"""

print(x_train)
print(y_test)

"""Creating the model"""

class ANN():
  def __init__(self,input_size,hidden_size,output_size,data_len):
    self.input_size = input_size
    self.hidden_size = hidden_size
    self.output_size = output_size
    self.m = data_len
    self.weight1 = np.random.randn(self.input_size,self.hidden_size)
    self.weight2 = np.random.randn(self.hidden_size,self.output_size)

  def sigmoid(self,X,deriv = False):
      if deriv:
        return X*(1-X)
      else:
        return 1/(1+np.exp(X))

  def feed_forward(self,X):
    self.o1 = np.dot(X,self.weight1).astype(float)
    self.s1 = self.sigmoid(self.o1)
    self.o2 = np.dot(self.s1,self.weight2).astype(float)
    self.s2 = self.sigmoid(self.o2)
    return self.s2,self.s1

  def loss(self,y,output):
    loss = 0
    for i in range(len(output)):
      loss += -(y_test.iloc[i][0]*np.log(output[0][i][0]) + (1-y_test.iloc[i][0])*(1-np.log(output[0][i][0])))
      loss += -(y_test.iloc[i][1]*np.log(output[0][i][1]) + (1-y_test.iloc[i][1])*(1-np.log(output[0][i][1])))

    return loss
    
  def back_prop(self,x,y,output_y,lr = 0.4):
    self.dz2 = output_y - y
    self.dw2 = (1/self.m)*np.dot(self.s1.T,self.dz2)
    self.dz1 = self.weight2.dot(self.dz2.T).T*self.s1*(1-self.s1)
    self.dw1 = (1/self.m)*np.dot(self.dz1.T,x).T

    self.weight2 = self.weight2 - lr*self.dw2
    self.weight1 = self.weight1 - lr*self.dw1

    return self.weight2,self.weight1

  def train(self,x,y):
    output = self.feed_forward(np.array(x[:]))
    w2,w1 = self.back_prop(np.array(x[:]),np.array(y[:]),output[0])
    loss = self.loss(np.array(y[:]),output)
    return loss,w2,w1

model = ANN(6,7,2,101)
output = model.feed_forward(np.array(x_train[:]))
w2,w1 = model.back_prop(np.array(x_train[:]),np.array(y_train[:]),output[0])

print(w2)
print(w1)

print(w2.shape)
print(w1.shape)

"""Training model for 1000 epochs"""

n_epochs = 1000
model = ANN(6,7,2,120)
for i in range(n_epochs):
  result = model.train(x_train,y_train)
  print("Epoch:-",i," Loss:-",result[0])

# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

history.history